use std::collections::HashMap;

use model::{AttackProperties, BuildProperties, EntityProperties, EntityType, RepairProperties};

pub fn entity_properties() -> HashMap<EntityType, EntityProperties> {
    use EntityType::*;
    [
        (
            BuilderUnit,
            EntityProperties {
                size: 1,
                build_score: 10,
                destroy_score: 100,
                can_move: true,
                population_provide: 0,
                population_use: 1,
                max_health: 10,
                initial_cost: 10,
                sight_range: 10,
                resource_per_health: 0,
                build: Some(BuildProperties {
                    options: vec![House, Wall, BuilderBase, MeleeBase, RangedBase, Turret],
                    init_health: Some(5),
                }),
                attack: Some(AttackProperties {
                    attack_range: 1,
                    damage: 1,
                    collect_resource: true,
                }),
                repair: Some(RepairProperties {
                    valid_targets: vec![
                        House,
                        Wall,
                        BuilderUnit,
                        MeleeUnit,
                        RangedUnit,
                        BuilderBase,
                        MeleeBase,
                        RangedBase,
                        Turret,
                    ],
                    power: 1,
                }),
            },
        ),
        (
            RangedUnit,
            EntityProperties {
                size: 1,
                build_score: 30,
                destroy_score: 300,
                can_move: true,
                population_provide: 0,
                population_use: 1,
                max_health: 10,
                initial_cost: 30,
                sight_range: 10,
                resource_per_health: 0,
                build: None,
                attack: Some(AttackProperties {
                    attack_range: 5,
                    damage: 5,
                    collect_resource: false,
                }),
                repair: None,
            },
        ),
        (
            Resource,
            EntityProperties {
                size: 1,
                build_score: 0,
                destroy_score: 0,
                can_move: false,
                population_provide: 0,
                population_use: 0,
                max_health: 30,
                initial_cost: 0,
                sight_range: 0,
                resource_per_health: 1,
                build: None,
                attack: None,
                repair: None,
            },
        ),
        (
            Wall,
            EntityProperties {
                size: 1,
                build_score: 10,
                destroy_score: 10,
                can_move: false,
                population_provide: 0,
                population_use: 0,
                max_health: 50,
                initial_cost: 10,
                sight_range: 2,
                resource_per_health: 0,
                build: None,
                attack: None,
                repair: None,
            },
        ),
        (
            BuilderBase,
            EntityProperties {
                size: 5,
                build_score: 500,
                destroy_score: 5000,
                can_move: false,
                population_provide: 5,
                population_use: 0,
                max_health: 300,
                initial_cost: 500,
                sight_range: 5,
                resource_per_health: 0,
                build: Some(BuildProperties {
                    options: vec![BuilderUnit],
                    init_health: None,
                }),
                attack: None,
                repair: None,
            },
        ),
        (
            House,
            EntityProperties {
                size: 3,
                build_score: 50,
                destroy_score: 500,
                can_move: false,
                population_provide: 5,
                population_use: 0,
                max_health: 50,
                initial_cost: 50,
                sight_range: 5,
                resource_per_health: 0,
                build: None,
                attack: None,
                repair: None,
            },
        ),
        (
            MeleeBase,
            EntityProperties {
                size: 5,
                build_score: 500,
                destroy_score: 5000,
                can_move: false,
                population_provide: 5,
                population_use: 0,
                max_health: 300,
                initial_cost: 500,
                sight_range: 5,
                resource_per_health: 0,
                build: Some(BuildProperties {
                    options: vec![MeleeUnit],
                    init_health: None,
                }),
                attack: None,
                repair: None,
            },
        ),
        (
            Turret,
            EntityProperties {
                size: 2,
                build_score: 50,
                destroy_score: 500,
                can_move: false,
                population_provide: 0,
                population_use: 0,
                max_health: 100,
                initial_cost: 50,
                sight_range: 10,
                resource_per_health: 0,
                build: None,
                attack: Some(AttackProperties {
                    attack_range: 5,
                    damage: 5,
                    collect_resource: false,
                }),
                repair: None,
            },
        ),
        (
            MeleeUnit,
            EntityProperties {
                size: 1,
                build_score: 20,
                destroy_score: 200,
                can_move: true,
                population_provide: 0,
                population_use: 1,
                max_health: 50,
                initial_cost: 20,
                sight_range: 10,
                resource_per_health: 0,
                build: None,
                attack: Some(AttackProperties {
                    attack_range: 1,
                    damage: 5,
                    collect_resource: false,
                }),
                repair: None,
            },
        ),
        (
            RangedBase,
            EntityProperties {
                size: 5,
                build_score: 500,
                destroy_score: 5000,
                can_move: false,
                population_provide: 5,
                population_use: 0,
                max_health: 300,
                initial_cost: 500,
                sight_range: 5,
                resource_per_health: 0,
                build: Some(BuildProperties {
                    options: vec![RangedUnit],
                    init_health: None,
                }),
                attack: None,
                repair: None,
            },
        ),
    ]
        .iter()
        .cloned()
        .collect()
}
